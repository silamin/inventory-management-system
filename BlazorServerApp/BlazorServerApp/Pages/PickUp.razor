@page "/pick-up"

@using Orders
@using BlazorServerApp.Helpers
@using BlazorServerApp.Managers

@attribute [Authorize(Roles = "WAREHOUSE_WORKER")]
@inject PickupManager Manager

<PageTitle>Pick-Up Management</PageTitle>

<div class='d-flex justify-content-between align-items-center mb-4'>
    <h1 class='text-dark fw-bold'>Pick-Up Management</h1>
    <button class='btn btn-danger' @onclick='Manager.Logout'>
        <i class='fas fa-sign-out-alt'></i> Logout
    </button>
</div>

<p class='text-center text-muted'>Manage orders and items for pick-up efficiently.</p>

@if (Manager.IsLoading)
{
    <div class='text-center my-4'>
        <div class='spinner-border' role='status'>
            <span class='visually-hidden'>Loading...</span>
        </div>
        <p>Loading orders, please wait...</p>
    </div>
}
else
{
    <div class='d-flex w-100 mb-4'>
        <button class='btn @(Manager.ActiveView == "Unassigned" ? "btn-danger" : "btn-outline-danger") flex-fill me-2'
                @onclick='() => Manager.ChangeViewAsync("Unassigned")'>
            Unassigned Orders
        </button>
        <button class='btn @(Manager.ActiveView == "Assigned" ? "btn-primary" : "btn-outline-primary") flex-fill mx-2'
                @onclick='() => Manager.ChangeViewAsync("Assigned")'>
            Assigned Orders
        </button>
        <button class='btn @(Manager.ActiveView == "Completed" ? "btn-success" : "btn-outline-success") flex-fill ms-2'
                @onclick='() => Manager.ChangeViewAsync("Completed")'>
            Completed Orders
        </button>
    </div>

    @* ---------------- UNASSIGNED ORDERS --------------- *@
    @if (Manager.ActiveView == "Unassigned")
    {
        <h3 class='mt-4 text-danger'>Unassigned Orders</h3>

        <!-- Search box for Unassigned orders -->

        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text h-100 w-100">
                    <i class="fas fa-search"></i>
                </span>
            </div>
            <input type="text" class="form-control"
                   placeholder="Search by Order ID..."
                   @bind="Manager.UnassignedSearchTerm"
                   @bind:event="oninput" />
            <button class="btn btn-outline-secondary" type="button">Clear</button>
        </div>

        @if (!Manager.UnassignedOrders.Any())
        {
            <p class='text-center text-muted'>No unassigned orders available at the moment.</p>
        }
        else
        {
            <table class='table table-bordered table-hover'>
                <thead class='table-danger'>
                    <tr>
                        <th class='text-center' style='cursor: pointer'
                            @onclick='() => Manager.SortUnassigned(SortColumn.OrderId)'>
                            Order ID
                            <i class='@(Manager.GetUnassignedSortIcon(SortColumn.OrderId))'></i>
                        </th>
                        <th class='text-center' style='cursor: pointer'
                            @onclick='() => Manager.SortUnassigned(SortColumn.DeliveryDate)'>
                            Delivery Date
                            <i class='@(Manager.GetUnassignedSortIcon(SortColumn.DeliveryDate))'></i>
                        </th>
                        <th class='text-center' style='cursor: pointer'
                            @onclick='() => Manager.SortUnassigned(SortColumn.CreatedAt)'>
                            Created At
                            <i class='@(Manager.GetUnassignedSortIcon(SortColumn.CreatedAt))'></i>
                        </th>
                        <th class='text-center'>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Manager.GetPagedUnassignedOrders())
                    {
                        <tr>
                            <td class='text-center'>@order.OrderId</td>
                            <td class='text-center'>@Manager.FormatTimestamp(order.DeliveryDate)</td>
                            <td class='text-center'>@Manager.FormatTimestamp(order.CreatedAt)</td>
                            <td class='text-center'>
                                <button class='btn btn-primary btn-sm me-2'
                                        @onclick='() => Manager.ToggleOrderDetails(order.OrderId, "Unassigned")'>
                                    View Items
                                </button>
                                <button class='btn btn-success btn-sm'
                                        @onclick='() => Manager.AssignOrderAsync(order)'>
                                    Assign to Me
                                </button>
                            </td>
                        </tr>
                        @if (Manager.SelectedOrder?.OrderId == order.OrderId && Manager.ViewingUnassignedDetails)
                        {
                            <tr>
                                <td colspan='4'>
                                    <div class='d-flex flex-wrap'>
                                        @foreach (var item in Manager.SelectedOrder.OrderItems)
                                        {
                                            <div class='card m-2' style='width: 18rem;'>
                                                <div class='card-body'>
                                                    <h5 class='card-title'>@item.ItemName</h5>
                                                    <p class='card-text'>
                                                        <strong>Total Quantity:</strong> @item.TotalQuantity
                                                    </p>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

            <!-- Pagination -->
            <div class='d-flex justify-content-between align-items-center mt-2'>
                <button class='btn btn-outline-secondary'
                        @onclick='Manager.PrevUnassignedPage'
                        disabled='@(Manager.UnassignedCurrentPage == 1)'>
                    Previous
                </button>
                <span>
                    Page @Manager.UnassignedCurrentPage
                    of @Manager.UnassignedTotalPages
                </span>
                <button class='btn btn-outline-secondary'
                        @onclick='Manager.NextUnassignedPage'
                        disabled='@(Manager.UnassignedCurrentPage == Manager.UnassignedTotalPages)'>
                    Next
                </button>
            </div>
        }
    }
    @* ---------------- ASSIGNED ORDERS ---------------- *@
    else if (Manager.ActiveView == "Assigned")
    {
        <h3 class='mt-4 text-primary'>Assigned Orders</h3>

        <!-- Search box for Assigned orders -->


        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text h-100 w-100">
                    <i class="fas fa-search"></i>
                </span>
            </div>
            <input type="text" class="form-control"
                   placeholder="Search by Order ID..."
                   @bind="Manager.AssignedSearchTerm"
                   @bind:event="oninput" />
            <button class="btn btn-outline-secondary" type="button">Clear</button>
        </div>

        @if (!Manager.AssignedOrders.Any())
        {
            <p class='text-center text-muted'>You have no assigned orders at the moment.</p>
        }
        else
        {
            <table class='table table-bordered table-hover'>
                <thead class='table-primary'>
                    <tr>
                        <th class='text-center' style='cursor: pointer'
                            @onclick='() => Manager.SortAssigned(SortColumn.OrderId)'>
                            Order ID
                            <i class='@(Manager.GetAssignedSortIcon(SortColumn.OrderId))'></i>
                        </th>
                        <th class='text-center' style='cursor: pointer'
                            @onclick='() => Manager.SortAssigned(SortColumn.DeliveryDate)'>
                            Delivery Date
                            <i class='@(Manager.GetAssignedSortIcon(SortColumn.DeliveryDate))'></i>
                        </th>
                        <th class='text-center' style='cursor: pointer'
                            @onclick='() => Manager.SortAssigned(SortColumn.CreatedAt)'>
                            Created At
                            <i class='@(Manager.GetAssignedSortIcon(SortColumn.CreatedAt))'></i>
                        </th>
                        <th class='text-center'>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Manager.GetPagedAssignedOrders())
                    {
                        <tr>
                            <td class='text-center'>@order.OrderId</td>
                            <td class='text-center'>@Manager.FormatTimestamp(order.DeliveryDate)</td>
                            <td class='text-center'>@Manager.FormatTimestamp(order.CreatedAt)</td>
                            <td class='text-center'>
                                <button class='btn btn-primary btn-sm'
                                        @onclick='() => Manager.ToggleOrderDetails(order.OrderId, "Assigned")'>
                                    View Details
                                </button>
                            </td>
                        </tr>

                        @if (Manager.SelectedOrder?.OrderId == order.OrderId && !Manager.ViewingUnassignedDetails)
                        {
                            <tr>
                                <td colspan='4'>
                                    <div class='mt-2'>
                                        <h5>Order Details</h5>
                                        <table class='table table-sm table-bordered mt-2'>
                                            <thead>
                                                <tr class='table-light'>
                                                    <th>Item Name</th>
                                                    <th class='text-center'>Quantity to Pick</th>
                                                    <th class='text-center'>Picked</th>
                                                    <th class='text-center'>Actions</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                @foreach (var item in Manager.SelectedOrder.OrderItems)
                                                {
                                                    <tr>
                                                        <td>@item.ItemName</td>
                                                        <td class='text-center'>@item.QuantityToPick</td>
                                                        <td class='text-center'>@(@item.TotalQuantity - @item.QuantityToPick)</td>
                                                        <td class='text-center'>
                                                            <button class='btn btn-success btn-sm'
                                                                    @onclick='() => Manager.PickupItemAsync(item)'
                                                                    disabled='@(item.QuantityToPick == 0)'>
                                                                Pick up item
                                                            </button>
                                                            <button class='btn btn-warning btn-sm'
                                                                    @onclick='() => Manager.RevertPickupItemAsync(item)'
                                                                    disabled='@(item.QuantityToPick == item.TotalQuantity)'>
                                                                Revert
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            </tbody>
                                        </table>
                                        <div class='text-center mt-4'>
                                            <button class='btn btn-success'
                                                    @onclick='Manager.CompleteOrderAsync'
                                                    disabled='@(!Manager.CanCompleteOrder())'>
                                                Complete Order
                                            </button>
                                        </div>
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

            <!-- Pagination -->
            <div class='d-flex justify-content-between align-items-center mt-2'>
                <button class='btn btn-outline-secondary'
                        @onclick='Manager.PrevAssignedPage'
                        disabled='@(Manager.AssignedCurrentPage == 1)'>
                    Previous
                </button>
                <span>
                    Page @Manager.AssignedCurrentPage
                    of @Manager.AssignedTotalPages
                </span>
                <button class='btn btn-outline-secondary'
                        @onclick='Manager.NextAssignedPage'
                        disabled='@(Manager.AssignedCurrentPage == Manager.AssignedTotalPages)'>
                    Next
                </button>
            </div>
        }
    }
    @* ---------------- COMPLETED ORDERS --------------- *@
    else if (Manager.ActiveView == "Completed")
    {
        <h3 class='mt-4 text-success'>Completed Orders</h3>

        <!-- Search box for Completed orders -->
        <div class="input-group mb-3">
            <div class="input-group-prepend">
                <span class="input-group-text h-100 w-100">
                    <i class="fas fa-search"></i>
                </span>
            </div>
            <input type="text" class="form-control"
                   placeholder="Search by Order ID..."
                   @bind="Manager.CompletedSearchTerm"
                   @bind:event="oninput" />
            <button class="btn btn-outline-secondary" type="button">Clear</button>
        </div>

        @if (!Manager.CompletedOrders.Any())
        {
            <p class='text-center text-muted'>No completed orders yet.</p>
        }
        else
        {
            <table class='table table-bordered table-hover'>
                <thead class='table-success'>
                    <tr>
                        <th class='text-center' style='cursor: pointer'
                            @onclick='() => Manager.SortCompleted(SortColumn.OrderId)'>
                            Order ID
                            <i class='@(Manager.GetCompletedSortIcon(SortColumn.OrderId))'></i>
                        </th>
                        <th class='text-center' style='cursor: pointer'
                            @onclick='() => Manager.SortCompleted(SortColumn.DeliveryDate)'>
                            Delivery Date
                            <i class='@(Manager.GetCompletedSortIcon(SortColumn.DeliveryDate))'></i>
                        </th>
                        <th class='text-center' style='cursor: pointer'
                            @onclick='() => Manager.SortCompleted(SortColumn.CreatedAt)'>
                            Created At
                            <i class='@(Manager.GetCompletedSortIcon(SortColumn.CreatedAt))'></i>
                        </th>
                        <th class='text-center'>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var order in Manager.GetPagedCompletedOrders())
                    {
                        <tr>
                            <td class='text-center'>@order.OrderId</td>
                            <td class='text-center'>@Manager.FormatTimestamp(order.DeliveryDate)</td>
                            <td class='text-center'>@Manager.FormatTimestamp(order.CreatedAt)</td>
                            <td class='text-center'>
                                <button class='btn btn-primary btn-sm'
                                        @onclick='() => Manager.ToggleOrderDetails(order.OrderId, "Completed")'>
                                    View Details
                                </button>
                            </td>
                        </tr>
                        @if (Manager.SelectedOrder?.OrderId == order.OrderId && !Manager.ViewingUnassignedDetails)
                        {
                            <tr>
                                <td colspan='4'>
                                    <div class='d-flex flex-wrap'>
                                        @foreach (var item in Manager.SelectedOrder.OrderItems)
                                        {
                                            <div class='card m-2' style='width: 18rem;'>
                                                <div class='card-body'>
                                                    <h5 class='card-title'>@item.ItemName</h5>
                                                    <p class='card-text'>
                                                        <strong>Total Quantity:</strong> @item.TotalQuantity
                                                    </p>
                                                </div>
                                            </div>
                                        }
                                    </div>
                                </td>
                            </tr>
                        }
                    }
                </tbody>
            </table>

            <!-- Pagination -->
            <div class='d-flex justify-content-between align-items-center mt-2'>
                <button class='btn btn-outline-secondary'
                        @onclick='Manager.PrevCompletedPage'
                        disabled='@(Manager.CompletedCurrentPage == 1)'>
                    Previous
                </button>
                <span>
                    Page @Manager.CompletedCurrentPage
                    of @Manager.CompletedTotalPages
                </span>
                <button class='btn btn-outline-secondary'
                        @onclick='Manager.NextCompletedPage'
                        disabled='@(Manager.CompletedCurrentPage == Manager.CompletedTotalPages)'>
                    Next
                </button>
            </div>
        }
    }
}

@code {
    protected override async Task OnInitializedAsync()
    {
        // Load default "Unassigned" list when page first loads
        await Manager.LoadOrdersAsync("Unassigned");

        // Make sure the page re-renders whenever the Manager’s state changes.
        Manager.RegisterStateChangeCallback(StateHasChanged);
    }
}

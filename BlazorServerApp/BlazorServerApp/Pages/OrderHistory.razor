@page "/order-history"
@attribute [Authorize(Roles = "INVENTORY_MANAGER")]

@using Orders
@using BlazorServerApp.Managers

@inject OrderHistoryManager OrderHistoryManager

<PageTitle>Order History</PageTitle>

<h1 class="text-center">Order History</h1>

@if (OrderHistoryManager.IsLoading)
{
    <div class="text-center my-4">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading orders, please wait...</p>
    </div>
}
else
{
    <div class="d-flex w-100 mb-4">
        <button class="btn @(IsActiveViewNotStarted() ? "btn-danger" : "btn-outline-danger") flex-fill me-2"
                @onclick="SwitchViewNotStarted">
            Not Started
        </button>
        <button class="btn @(IsActiveViewInProgress() ? "btn-primary" : "btn-outline-primary") flex-fill me-2"
                @onclick="SwitchViewInProgress">
            In Progress
        </button>
        <button class="btn @(IsActiveViewCompleted() ? "btn-success" : "btn-outline-success") flex-fill ms-2"
                @onclick="SwitchViewCompleted">
            Completed
        </button>
    </div>

    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text h-100 w-100">
                <i class="fas fa-search"></i>
            </span>
        </div>
        <input type="text" class="form-control" placeholder="Search by Order ID"
               @bind="OrderHistoryManager.SearchQuery"
               @bind:event="oninput"
               @bind:after="ApplyFilter" />
        <button class="btn btn-outline-secondary" @onclick="ClearFilters" type="button">Clear</button>
    </div>

    <!-- Orders Table -->
    @if (OrdersToShow.Any())
    {
        <h2 class="mt-4">@ActiveView</h2>

        <table class="table table-hover table-bordered table-striped">
            <thead>
                <tr class="table-light">
                    <th class="text-center" @onclick="() => ApplySortinBygOrderId()" style="cursor: pointer;">
                        Order ID <i class="@(GetSortIcon("OrderId"))"></i>
                    </th>
                    <th class="text-center" @onclick="() => ApplySortingByOrderDate()" style="cursor: pointer;">
                        Order Date <i class="@(GetSortIcon("OrderDate"))"></i>
                    </th>
                    <th class="text-center" @onclick="() => ApplySortingByCreatedBy()" style="cursor: pointer;">
                        Created By <i class="@(GetSortIcon("CreatedBy"))"></i>
                    </th>
                    <th class="text-center" @onclick="() => ApplySortingByDeliveryDate()" style="cursor: pointer;">
                        Delivery Date <i class="@(GetSortIcon("DeliveryDate"))"></i>
                    </th>

                    @if (ActiveView == OrderStatus.Completed)
                    {
                        <th class="text-center" @onclick="() => ApplySortingByCompletedAt()" style="cursor: pointer;">
                            Completed At <i class="@(GetSortIcon("CompletedAt"))"></i>
                        </th>
                        <th class="text-center" @onclick="() => ApplySortingByAssignedUser()" style="cursor: pointer;">
                            Completed By <i class="@(GetSortIcon("AssignedUser"))"></i>
                        </th>
                    }
                    else if (ActiveView == OrderStatus.InProgress)
                    {
                        <th class="text-center" @onclick="() => ApplySortingByAssignedUser()" style="cursor: pointer;">
                            Assigned User <i class="@(GetSortIcon("AssignedUser"))"></i>
                        </th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var order in OrdersToShow)
                {
                    <tr>
                        <td class="text-center">@order.OrderId</td>
                        <td class="text-center">@order.CreatedAt.ToDateTime().ToString("g")</td>
                        <td class="text-center">@order.DeliveryDate.ToDateTime().ToString("g")</td>
                        <td class="text-center">@order.CreatedByUser</td>
                        @if (ActiveView == OrderStatus.Completed)
                        {
                            <td class="text-center">@order.CompletedAt?.ToDateTime().ToString("g")</td>
                            <td class="text-center">@order.AssignedUser</td>
                        }
                        else if (ActiveView == OrderStatus.InProgress)
                        {
                            <td class="text-center">@order.AssignedUser</td>
                        }
                    </tr>
                    @if (ActiveView == OrderStatus.Completed || ActiveView == OrderStatus.NotStarted)
                    {
                        <tr>
                            <td colspan="5">
                                <div class="d-flex flex-wrap p-2">
                                    @foreach (var item in order.OrderItems)
                                    {
                                        <div class="me-3">
                                            <strong>@item.ItemName</strong>: @item.TotalQuantity
                                        </div>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                    else if (ActiveView == OrderStatus.InProgress)
                    {
                        <tr>
                            <td colspan="6">
                                <table class="table table-sm table-bordered">
                                    <thead>
                                        <tr class="table-light">
                                            <th class="text-center">Item Name</th>
                                            <th class="text-center">Quantity to Pick</th>
                                            <th class="text-center">Items Picked</th>
                                            <th class="text-center">Total Quantity Ordered</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in order.OrderItems)
                                        {
                                            <tr>
                                                <td class="text-center">@item.ItemName</td>
                                                <td class="text-center">@item.QuantityToPick</td>
                                                <td class="text-center">@(item.TotalQuantity - item.QuantityToPick)</td>
                                                <td class="text-center">@item.TotalQuantity</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <!-- Pagination -->
        <div class="d-flex justify-content-between align-items-center mt-3 mb-4">
            <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@IsFirstPage()">
                <i class="fas fa-arrow-left"></i> Previous
            </button>
            <span>Page @GetCurrentPage() of @OrderHistoryManager.GetTotalPages(ActiveView)</span>
            <button class="btn btn-secondary" @onclick="NextPage" disabled="@IsLastPage()">
                Next <i class="fas fa-arrow-right"></i>
            </button>
        </div>
    }
    else
    {
        <p>No orders found for the selected filters.</p>
    }
}


@code {
    private OrderStatus ActiveView { get; set; } = OrderStatus.InProgress;
    private IEnumerable<Order> OrdersToShow = Enumerable.Empty<Order>();

    protected override async Task OnInitializedAsync()
    {
        OrderHistoryManager.RegisterStateChangeCallback(StateHasChanged);
        await LoadOrdersAsync();
    }

    private async Task LoadOrdersAsync()
    {
        await OrderHistoryManager.LoadOrdersAsync(ActiveView);
        RefreshOrdersView();
    }

    private void RefreshOrdersView()
    {
        OrdersToShow = OrderHistoryManager.GetOrdersByStatus(ActiveView)
            .Skip((GetCurrentPage() - 1) * OrderHistoryManager.GetPageSize(ActiveView))
            .Take(OrderHistoryManager.GetPageSize(ActiveView));
        StateHasChanged();
    }

    private void ApplyFilter()
    {
        RefreshOrdersView();
    }

    private void ClearFilters()
    {
        OrderHistoryManager.ClearFilters();
        RefreshOrdersView();
    }

    private void PreviousPage()
    {
        OrderHistoryManager.PreviousPage(ActiveView);
        RefreshOrdersView();
    }

    private void NextPage()
    {
        OrderHistoryManager.NextPage(ActiveView);
        RefreshOrdersView();
    }

    private async Task SwitchViewCompleted()
    {
        ActiveView = OrderStatus.Completed;
        await LoadOrdersAsync();
    }

    private async Task SwitchViewInProgress()
    {
        ActiveView = OrderStatus.InProgress;
        await LoadOrdersAsync();
    }

    private async Task SwitchViewNotStarted()
    {
        ActiveView = OrderStatus.NotStarted;
        await LoadOrdersAsync();
    }

    private bool IsActiveViewNotStarted() => ActiveView == OrderStatus.NotStarted;


    private void ApplySorting(string column)
    {
        OrderHistoryManager.SetSorting(column);
        RefreshOrdersView();
    }
    private void ApplySortinBygOrderId()
    {
        ApplySorting("OrderId");
    }
    private void ApplySortingByOrderDate()
    {
        ApplySorting("OrderDate");
    }
    private void ApplySortingByDeliveryDate()
    {
        ApplySorting("DeliveryDate");
    }
    private void ApplySortingByAssignedUser()
    {
        ApplySorting("AssignedUser");
    }
    private void ApplySortingByCreatedBy()
    {
        ApplySorting("CreatedBy");
    }
    private void ApplySortingByCompletedAt()
    {
        ApplySorting("CompletedAt");
    }

    private string GetSortIcon(string column)
    {
        return OrderHistoryManager.SortColumn == column
            ? (OrderHistoryManager.Ascending ? "fas fa-sort-up" : "fas fa-sort-down")
            : "fas fa-sort";
    }

    private int GetCurrentPage() => ActiveView == OrderStatus.InProgress ? OrderHistoryManager.InProgressPage : OrderHistoryManager.CompletedPage;
    private bool IsFirstPage() => GetCurrentPage() == 1;
    private bool IsLastPage() => GetCurrentPage() >= OrderHistoryManager.GetTotalPages(ActiveView);
    private bool IsActiveViewInProgress() => ActiveView == OrderStatus.InProgress;
    private bool IsActiveViewCompleted() => ActiveView == OrderStatus.Completed;
}

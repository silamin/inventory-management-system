@page "/order-history"
@attribute [Authorize(Roles = "INVENTORY_MANAGER")]

@using Orders
@using BlazorServerApp.Managers

@inject OrderHistoryManager OrderHistoryManager

<PageTitle>Order History</PageTitle>

<h1 class="text-center">Order History</h1>

<!-- Filters Section -->
<div class="d-flex align-items-center justify-content-center mb-3 w-100">
    <div class="me-3">
        <input type="date" class="form-control"
               @bind="OrderHistoryManager.StartDate"
               @bind:after="ApplyFilter" />
    </div>
    <div class="me-3">
        <input type="date" class="form-control"
               @bind="OrderHistoryManager.EndDate"
               @bind:after="ApplyFilter" />
    </div>
    <div class="input-group">
        <input type="text" class="form-control" placeholder="Search by Order ID"
               @bind="OrderHistoryManager.SearchQuery"
               @bind:event="oninput"
               @bind:after="ApplyFilter" />
        <button class="btn btn-outline-secondary" @onclick="ClearFilters" type="button">Clear</button>
    </div>
</div>

<!-- Tab/Toggle Navigation -->
<div class="d-flex w-100 mb-4">
    <button class="btn btn-primary flex-fill me-2"
            @onclick="SwitchViewInProgress"
            disabled="@IsActiveViewInProgress()">
        In Progress
    </button>
    <button class="btn btn-success flex-fill ms-2"
            @onclick="SwitchViewCompleted"
            disabled="@IsActiveViewCompleted()">
        Completed
    </button>
</div>

<!-- Orders Table -->
@if (OrdersToShow.Any())
{
    <h2 class="mt-4">@ActiveView</h2>

    <table class="table">
        <thead>
            <tr>
                <th>Order ID</th>
                <th>Order Date</th>
                <th>Delivery Date</th>
                <th>Assigned User</th>
                <th>Created By</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var order in OrdersToShow)
            {
                <tr>
                    <td>@order.OrderId</td>
                    <td>@order.CreatedAt.ToDateTime().ToString("g")</td>
                    <td>@order.DeliveryDate.ToDateTime().ToString("g")</td>
                    <td>@order.AssignedUser</td>
                    <td>@order.CreatedByUser</td>
                </tr>
                @if (ActiveView == OrderStatus.Completed)
                {
                    <tr>
                        <td colspan="5">
                            <div class="d-flex flex-wrap p-2">
                                @foreach (var item in order.OrderItems)
                                {
                                    <div class="me-3">
                                        <strong>@item.ItemName</strong>:
                                        Picked @item.QuantityToPick / Total @item.TotalQuantity
                                    </div>
                                }
                            </div>
                        </td>
                    </tr>
                }
                else if (ActiveView == OrderStatus.InProgress)
                {
                    <tr>
                        <td colspan="5">
                            <table class="table table-sm table-bordered">
                                <thead>
                                    <tr>
                                        <th>Item Name</th>
                                        <th>Quantity to Pick</th>
                                        <th>Items Picked</th>
                                        <th>Total Quantity Ordered</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var item in order.OrderItems)
                                    {
                                        <tr>
                                            <td>@item.ItemName</td>
                                            <td>@item.QuantityToPick</td>
                                            <td>@(item.TotalQuantity - item.QuantityToPick)</td>
                                            <td>@item.TotalQuantity</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>

    <!-- Pagination -->
    <div class="d-flex justify-content-between align-items-center mt-3">
        <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@IsFirstPage()">
            <i class="fas fa-arrow-left"></i> Previous
        </button>
        <span>Page @GetCurrentPage() of @OrderHistoryManager.GetTotalPages(ActiveView)</span>
        <button class="btn btn-secondary" @onclick="NextPage" disabled="@IsLastPage()">
            Next <i class="fas fa-arrow-right"></i>
        </button>
    </div>
}
else
{
    <p>No orders found for the selected filters.</p>
}

@code {
    private OrderStatus ActiveView { get; set; } = OrderStatus.InProgress;
    private IEnumerable<Order> OrdersToShow = Enumerable.Empty<Order>();

    protected override async Task OnInitializedAsync()
    {
        await LoadOrdersAsync();
    }

    private async Task LoadOrdersAsync()
    {
        await OrderHistoryManager.LoadOrdersAsync(ActiveView);
        RefreshOrdersView();
    }

    private void RefreshOrdersView()
    {
        OrdersToShow = OrderHistoryManager.GetOrdersByStatus(ActiveView);
        Console.WriteLine($"Displaying {OrdersToShow.Count()} orders for view {ActiveView}");
        StateHasChanged();
    }


    private void ApplyFilter()
    {
        RefreshOrdersView();
    }

    private void ClearFilters()
    {
        OrderHistoryManager.ClearFilters();
        RefreshOrdersView();
    }

    private void PreviousPage()
    {
        OrderHistoryManager.PreviousPage(ActiveView);
        RefreshOrdersView();
    }

    private void NextPage()
    {
        OrderHistoryManager.NextPage(ActiveView);
        RefreshOrdersView();
    }

    private async void SwitchViewCompleted()
    {
        ActiveView = OrderStatus.Completed;
        await LoadOrdersAsync();
        RefreshOrdersView();
    }

    private async void SwitchViewInProgress()
    {
        ActiveView = OrderStatus.InProgress;
        await LoadOrdersAsync();
        RefreshOrdersView();
    }


    private bool IsActiveViewInProgress() => ActiveView == OrderStatus.InProgress;
    private bool IsActiveViewCompleted() => ActiveView == OrderStatus.Completed;

    private int GetCurrentPage() => ActiveView == OrderStatus.InProgress ? OrderHistoryManager.InProgressPage : OrderHistoryManager.CompletedPage;
    private bool IsFirstPage() => GetCurrentPage() == 1;
    private bool IsLastPage() => GetCurrentPage() >= OrderHistoryManager.GetTotalPages(ActiveView);
}

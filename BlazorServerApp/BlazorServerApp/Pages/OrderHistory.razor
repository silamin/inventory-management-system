@page "/order-history"

@using BlazorServerApp.Managers
@using Orders

@inject OrderHistoryManager OrderHistoryManager

<PageTitle>Order History</PageTitle>

<h1 class="text-center">Order History</h1>

<!-- Filters Section -->
<div class="d-flex align-items-center justify-content-center mb-3 w-100">
    <div class="me-4">
        <select class="form-select"
                style="display:inline-block; width:fit-content; white-space:nowrap;"
                @bind="OrderHistoryManager.SelectedStatus"
                @bind:after="ApplyFilter">
            <option value="">All Statuses</option>
            @foreach (OrderStatus status in Enum.GetValues(typeof(OrderStatus)))
            {
                <option value="@status">@status</option>
            }
        </select>
    </div>

    <div class="me-3">
        <input type="date" class="form-control"
               @bind="OrderHistoryManager.StartDate"
               @bind:after="ApplyFilter" />
    </div>

    <div class="me-3">
        <input type="date" class="form-control"
               @bind="OrderHistoryManager.EndDate"
               @bind:after="ApplyFilter" />
    </div>

    <div class="input-group">
        <input type="text" class="form-control" placeholder="Search by Order ID"
               @bind="OrderHistoryManager.SearchQuery"
               @bind:event="oninput"
               @bind:after="ApplyFilter" />
        <button class="btn btn-outline-secondary" @onclick="ClearFilters" type="button">Clear</button>
    </div>
</div>

<!-- Grouped Orders By Status -->
@if (GroupedOrders?.Any() == true)
{
    @foreach (var statusGroup in GroupedOrders)
    {
        <h2 class="mt-4">@statusGroup.Key</h2>

        <table class="table">
            <thead>
                <tr>
                    <th @onclick="() => SortByOrderId()" style="cursor:pointer;">
                        Order ID
                        <i class="@OrderHistoryManager.GetSortIcon("OrderId")"></i>
                    </th>
                    <th @onclick="() => SortByCreatedAt()" style="cursor:pointer;">
                        Order Date
                        <i class="@OrderHistoryManager.GetSortIcon("CreatedAt")"></i>
                    </th>
                    <th>Delivery Date</th>
                    <th>Assigned User</th>
                    <th>Created By</th>
                </tr>
            </thead>

            <tbody>
                @foreach (var order in statusGroup)
                {
                    <tr>
                        <td>@order.OrderId</td>
                        <td>@order.CreatedAt.ToDateTime().ToString("g")</td>
                        <td>@order.DeliveryDate.ToDateTime().ToString("g")</td>
                        <td>@order.AssignedUser</td>
                        <td>@order.CreatedByUser</td>
                    </tr>

                    <tr>
                        <td colspan="5">
                            @if (order.OrderStatus == OrderStatus.Completed)
                            {
                                <!-- Horizontal Layout for Completed Orders -->
                                <div class="d-flex flex-wrap p-2">
                                    @foreach (var item in order.OrderItems)
                                    {
                                        <div class="me-3">
                                            <strong>@item.ItemName</strong>: @item.TotalQuantity
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <!-- Table Layout for In Progress Orders -->
                                <table class="table table-sm table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Item Name</th>
                                            <th>Quantity to Pick</th>
                                            <th>Items Picked</th>
                                            <th>Total Quantity Ordered</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var item in order.OrderItems)
                                        {
                                            <tr>
                                                <td>@item.ItemName</td>
                                                <td>@item.QuantityToPick</td>
                                                <td>@(item.TotalQuantity - item.QuantityToPick)</td>
                                                <td>@item.TotalQuantity</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Pagination Controls -->
        <div class="d-flex justify-content-between align-items-center mt-3">
            <button class="btn btn-secondary" @onclick="() => PreviousPage(statusGroup.Key)" disabled="@OrderHistoryManager.IsFirstPage(statusGroup.Key)">
                <i class="fas fa-arrow-left"></i> Previous
            </button>
            <span>Page @OrderHistoryManager.GetCurrentPage(statusGroup.Key) of @OrderHistoryManager.GetTotalPages(statusGroup.Key)</span>
            <button class="btn btn-secondary" @onclick="() => NextPage(statusGroup.Key)" disabled="@OrderHistoryManager.IsLastPage(statusGroup.Key)">
                Next <i class="fas fa-arrow-right"></i>
            </button>
        </div>
    }
}
else
{
    <p>No orders found for the selected filters.</p>
}

@code {
    private List<IGrouping<OrderStatus, Order>> GroupedOrders;

    protected override async Task OnInitializedAsync()
    {
        await OrderHistoryManager.LoadAllOrdersAsync();
        RefreshOrdersView();
    }

    private void RefreshOrdersView()
    {
        var allOrders = OrderHistoryManager.GetPagedOrders();
        GroupedOrders = allOrders.GroupBy(o => o.OrderStatus).ToList();
        StateHasChanged();
    }

    private void ApplyFilter()
    {
        OrderHistoryManager.ResetAllPagination();
        RefreshOrdersView();
    }

    private void ClearFilters()
    {
        OrderHistoryManager.ClearFilters();
        RefreshOrdersView();
    }

    private void PreviousPage(OrderStatus status)
    {
        OrderHistoryManager.PreviousPage(status);
        RefreshOrdersView();
    }

    private void NextPage(OrderStatus status)
    {
        OrderHistoryManager.NextPage(status);
        RefreshOrdersView();
    }

    private void SortByOrderId()
    {
        OrderHistoryManager.SortByColumn("OrderId");
        RefreshOrdersView();
    }

    private void SortByCreatedAt()
    {
        OrderHistoryManager.SortByColumn("CreatedAt");
        RefreshOrdersView();
    }
}

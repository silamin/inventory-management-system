@page "/add-user"
@attribute [Authorize(Roles = "INVENTORY_MANAGER")]
@using Users
@inject BlazorServerApp.Application.UseCases.UserUseCases UserUseCases
@inject Blazored.Toast.Services.IToastService ToastService
@inject NavigationManager NavigationManager

<PageTitle>Add New User</PageTitle>

<div class="card shadow border rounded-3">
    <div class="card-header bg-primary text-white d-flex flex-column justify-content-center align-items-center text-center py-4">
        <div class="d-flex align-items-center">
            <i class="fas fa-user-plus fs-2 me-2"></i>
            <h3 class="card-title fw-bold mb-0">Add New User</h3>
        </div>
        <small class="card-subtitle mt-2 text-white opacity-75">Fill in the details below to add a new user to your system</small>
    </div>

    <div class="card-body p-4">
        <EditForm Model="newUser" OnValidSubmit="AddNewUser">
            <DataAnnotationsValidator />
            <ValidationSummary class="alert alert-danger" />

            <!-- Username Input -->
            <div class="mb-3">
                <label for="userName" class="form-label">Username</label>
                <div class="input-group">
                    <span class="input-group-text bg-light"><i class="fas fa-user text-muted"></i></span>
                    <InputText id="userName" @bind-Value="newUser.UserName" class="form-control" placeholder="Enter username" />
                </div>
                <ValidationMessage For="@(() => newUser.UserName)" class="text-danger mt-1" />
            </div>

            <!-- Password Input -->
            <div class="mb-3">
                <label for="password" class="form-label">Password</label>
                <div class="input-group">
                    <span class="input-group-text bg-light"><i class="fas fa-lock text-muted"></i></span>
                    <InputText id="password" @bind-Value="newUser.Password" type="password" class="form-control" placeholder="Enter password" />
                </div>
                <ValidationMessage For="@(() => newUser.Password)" class="text-danger mt-1" />
            </div>

            <!-- Role Selection -->
            <div class="mb-3">
                <label for="userRole" class="form-label">Role</label>
                <div class="input-group">
                    <span class="input-group-text bg-light"><i class="fas fa-user-tag text-muted"></i></span>
                    <InputSelect id="userRole" @bind-Value="newUser.UserRole" class="form-control">
                        @foreach (UserRole role in Enum.GetValues(typeof(UserRole)))
                        {
                            <option value="@role">@HumanizeRole(role)</option>
                        }
                    </InputSelect>
                </div>
                <ValidationMessage For="@(() => newUser.UserRole)" class="text-danger mt-1" />
            </div>

            <!-- Submit Button -->
            <div class="d-grid">
                <button type="submit" class="btn btn-primary btn-lg mt-3" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        @:Adding...
                    }
                    else
                    {
                        <i class="fas fa-plus"></i> @:Add User
                    }
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private CreateUser newUser = new CreateUser();
    private bool isLoading = false;

    private async Task AddNewUser()
    {
        isLoading = true;

        try
        {
            await UserUseCases.AddUserAsync(newUser);
            ToastService.ShowSuccess($"User '{newUser.UserName}' added successfully!");
            NavigationManager.NavigateTo("/inventory-dashboard");
        }
        catch (Exception ex)
        {
            ToastService.ShowError("An error occurred while adding the user.");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string HumanizeRole(UserRole role)
    {
        return role switch
        {
            UserRole.InventoryManager => "Inventory Manager",
            UserRole.WarehouseWorker => "Warehouse Worker",
            _ => role.ToString()
        };
    }
}

@page "/manage-users"
@attribute [Authorize(Roles = "INVENTORY_MANAGER")]
@using Microsoft.AspNetCore.Components.Web
@using BlazorServerApp.Managers
@using Users
@inject BlazorServerApp.Application.UseCases.UserUseCases UserUseCases
@inject Blazored.Toast.Services.IToastService ToastService
@inject NavigationManager NavigationManager

@inject UserManager Manager

<PageTitle>Manage Users</PageTitle>

<h1>Manage Users</h1>
<p>Here you can view and manage users by their roles.</p>

<!-- Add User Button -->
<div class="d-flex justify-content-between mb-4">
    <div></div>
    <button class="btn btn-primary" @onclick="() => ShowAddUserModal = true">
        <i class="fas fa-plus"></i> Add User
    </button>
</div>

@if (Manager.IsLoading)
{
    <div class="text-center my-4">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading users, please wait...</p>
    </div>
}
else if (!string.IsNullOrEmpty(Manager.ErrorMessage))
{
    <div class="alert alert-danger">@Manager.ErrorMessage</div>
}
else
{
    <div class="d-flex w-100 mb-4">
        <button class="btn @(ActiveRole == UserRole.InventoryManager ? "btn-primary" : "btn-outline-primary") flex-fill me-2"
                @onclick="LoadInventoryManagers">
            Inventory Managers
        </button>
        <button class="btn @(ActiveRole == UserRole.WarehouseWorker ? "btn-success" : "btn-outline-success") flex-fill ms-2"
                @onclick="LoadWarehouseWorkers">
            Warehouse Workers
        </button>
    </div>

    <div class="input-group mb-3">
        <div class="input-group-prepend">
            <span class="input-group-text h-100 w-100">
                <i class="fas fa-search"></i>
            </span>
        </div>
        <input type="text" class="form-control" placeholder="Search by Username or ID"
               @bind="Manager.SearchQuery" @bind:event="oninput" @bind:after="ApplySearch" />
        <button class="btn btn-outline-secondary" @onclick="ClearSearch">Clear</button>
    </div>

    @if (UsersToShow != null && UsersToShow.Any())
    {
        <h4 class="mt-4">Role: @Manager.HumanizeRole(ActiveRole)</h4>
        <table class="table table-hover table-bordered table-striped">
            <thead>
                <tr class="table-light">
                    <th class="text-center" @onclick="() => ApplySortingByUserName()" style="cursor: pointer;">
                        Username <i class="@(GetSortIcon("UserName"))"></i>
                    </th>
                    <th class="text-center">Password</th>
                    <th class="text-center" @onclick="() => ApplySortingByUserId()" style="cursor: pointer;">
                        User ID <i class="@(GetSortIcon("UserId"))"></i>
                    </th>
                    <th class="text-center">Role</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in UsersToShow)
                {
                    @if (Manager.EditingUser?.UserId == user.UserId)
                    {
                        <tr>
                            <td><input class="form-control" @bind="Manager.EditingUser.Username" /></td>
                            <td><input class="form-control" type="password" @bind="Manager.EditingUser.Password" /></td>
                            <td class="text-center">@user.UserId</td>
                            <td>
                                <select class="form-select" @bind="Manager.EditingUser.UserRole">
                                    @foreach (var role in Enum.GetValues(typeof(UserRole)))
                                    {
                                        <option value="@role">@Manager.HumanizeRole((UserRole)role)</option>
                                    }
                                </select>
                            </td>
                            <td class="text-center">
                                <button class="btn btn-sm btn-success me-2" @onclick="SaveUser">
                                    <i class="fas fa-check"></i> Save
                                </button>
                                <button class="btn btn-sm btn-secondary" @onclick="Manager.CancelEdit">
                                    <i class="fas fa-times"></i> Cancel
                                </button>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td>@user.UserName</td>
                            <td>******</td>
                            <td class="text-center">@user.UserId</td>
                            <td>@Manager.HumanizeRole(user.UserRole)</td>
                            <td class="text-center">
                                <button class="btn btn-sm btn-primary me-2" @onclick="() => Manager.ToggleEditUser(user)">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => Manager.DeleteUserAsync(new DeleteUser { UserId = user.UserId })">
                                    <i class="fas fa-trash-alt"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <!-- Pagination -->
        <div class="d-flex justify-content-between align-items-center mt-3 mb-4">
            <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@IsFirstPage()">
                <i class="fas fa-arrow-left"></i> Previous
            </button>
            <span>Page @CurrentPage of @TotalPages</span>
            <button class="btn btn-secondary" @onclick="NextPage" disabled="@IsLastPage()">
                Next <i class="fas fa-arrow-right"></i>
            </button>
        </div>
    }
    else
    {
        <div class="text-center mt-4">
            <p class="text-muted">No users found for the selected role.</p>
        </div>
    }
}

<!-- Add User Modal -->
@if (ShowAddUserModal)
{
    <div class="modal fade show" style="display:block;" aria-modal="true" role="dialog">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add New User</h5>
                    <button type="button" class="btn-close" @onclick="() => CloseAddUserModal()" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="newUser" OnValidSubmit="AddNewUser">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="alert alert-danger" />

                        <!-- Username Input -->
                        <div class="mb-3">
                            <label for="userName" class="form-label">Username</label>
                            <div class="input-group">
                                <span class="input-group-text bg-light"><i class="fas fa-user text-muted"></i></span>
                                <InputText id="userName" @bind-Value="newUser.UserName" class="form-control" placeholder="Enter username" />
                            </div>
                            <ValidationMessage For="@(() => newUser.UserName)" class="text-danger mt-1" />
                        </div>

                        <!-- Password Input -->
                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <div class="input-group">
                                <span class="input-group-text bg-light"><i class="fas fa-lock text-muted"></i></span>
                                <InputText id="password" @bind-Value="newUser.Password" type="password" class="form-control" placeholder="Enter password" />
                            </div>
                            <ValidationMessage For="@(() => newUser.Password)" class="text-danger mt-1" />
                        </div>

                        <!-- Role Selection -->
                        <div class="mb-3">
                            <label for="userRole" class="form-label">Role</label>
                            <div class="input-group">
                                <span class="input-group-text bg-light"><i class="fas fa-user-tag text-muted"></i></span>
                                <InputSelect id="userRole" @bind-Value="newUser.UserRole" class="form-control">
                                    @foreach (UserRole role in Enum.GetValues(typeof(UserRole)))
                                    {
                                        <option value="@role">@Manager.HumanizeRole(role)</option>
                                    }
                                </InputSelect>
                            </div>
                            <ValidationMessage For="@(() => newUser.UserRole)" class="text-danger mt-1" />
                        </div>

                        <!-- Submit Button -->
                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary btn-lg mt-3" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                    @:Adding...
                                }
                                else
                                {
                                    <i class="fas fa-plus"></i> @:Add User
                                }
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private bool ShowAddUserModal = false;
    private CreateUser newUser = new CreateUser();
    private bool isLoading = false;

    private async Task AddNewUser()
    {
        isLoading = true;

        try
        {
            await UserUseCases.AddUserAsync(newUser);
            ToastService.ShowSuccess($"User '{newUser.UserName}' added successfully!");
            await Manager.RefreshUsersAsync(ActiveRole);

            // Reset modal state
            newUser = new CreateUser();
            ShowAddUserModal = false;
        }
        catch (Exception ex)
        {
            ToastService.ShowError("An error occurred while adding the user.");
            Console.WriteLine(ex.Message);
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void CloseAddUserModal()
    {
        ShowAddUserModal = false;
    }

    private UserRole ActiveRole { get; set; } = UserRole.InventoryManager;
    private List<GetUser> UsersToShow => PaginateUsers();
    private const int PageSize = 14;
    private int CurrentPage { get; set; } = 1;
    private int TotalPages => (int)Math.Ceiling((double)FilteredUsers.Count() / PageSize);
    private IEnumerable<GetUser> FilteredUsers => Manager.Users
        .Where(u => u.UserRole == ActiveRole &&
                   (string.IsNullOrEmpty(Manager.SearchQuery) ||
                   u.UserName.Contains(Manager.SearchQuery, StringComparison.OrdinalIgnoreCase) ||
                   u.UserId.ToString().Contains(Manager.SearchQuery)));

    protected override async Task OnInitializedAsync()
    {
        await LoadInventoryManagers();
    }

    private async Task LoadInventoryManagers()
    {
        ActiveRole = UserRole.InventoryManager;
        CurrentPage = 1;
        await Manager.RefreshUsersAsync(ActiveRole);
        StateHasChanged();
    }

    private async Task LoadWarehouseWorkers()
    {
        ActiveRole = UserRole.WarehouseWorker;
        CurrentPage = 1;
        await Manager.RefreshUsersAsync(ActiveRole);
        StateHasChanged();
    }

    private List<GetUser> PaginateUsers()
    {
        var users = FilteredUsers;
        if (!string.IsNullOrEmpty(Manager.SortColumn))
        {
            users = Manager.Ascending
                ? users.OrderBy(u => Manager.GetPropertyValue(u, Manager.SortColumn))
                : users.OrderByDescending(u => Manager.GetPropertyValue(u, Manager.SortColumn));
        }
        return users
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages) CurrentPage++;
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1) CurrentPage--;
    }

    private bool IsFirstPage() => CurrentPage == 1;
    private bool IsLastPage() => CurrentPage == TotalPages;

    private void ApplySearch()
    {
        CurrentPage = 1;
        StateHasChanged();
    }

    private void ClearSearch()
    {
        Manager.ClearSearch();
        ApplySearch();
    }

    private void ApplySorting(string column)
    {
        Manager.SetSorting(column);
        StateHasChanged();
    }
    private void ApplySortingByUserName()
    {
        ApplySorting("UserName");
    }
    private void ApplySortingByUserId()
    {
        ApplySorting("UserId");
    }

    private string GetSortIcon(string column)
    {
        return Manager.SortColumn == column
            ? (Manager.Ascending ? "fas fa-sort-up" : "fas fa-sort-down")
            : "fas fa-sort";
    }

    private async void SaveUser()
    {
        await Manager.SaveUserAsync();
        StateHasChanged();
    }
}

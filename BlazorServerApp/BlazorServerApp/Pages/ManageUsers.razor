@page "/manage-users"
@attribute [Authorize(Roles = "INVENTORY_MANAGER")]
@using Microsoft.AspNetCore.Components.Web
@using BlazorServerApp.Managers
@using Users

@inject UserManager Manager

<PageTitle>Manage Users</PageTitle>

<h1>Manage Users</h1>
<p>Here you can view and manage users by their roles.</p>

@if (Manager.IsLoading)
{
    <div class="text-center my-4">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading users, please wait...</p>
    </div>
}
else if (!string.IsNullOrEmpty(Manager.ErrorMessage))
{
    <div class="alert alert-danger">@Manager.ErrorMessage</div>
}
else
{
    <div class="d-flex w-100 mb-4">
        <button class="btn @(ActiveRole == UserRole.InventoryManager ? "btn-primary" : "btn-outline-primary") flex-fill me-2"
                @onclick="LoadInventoryManagers">
            Inventory Managers
        </button>
        <button class="btn @(ActiveRole == UserRole.WarehouseWorker ? "btn-success" : "btn-outline-success") flex-fill ms-2"
                @onclick="LoadWarehouseWorkers">
            Warehouse Workers
        </button>
    </div>

    @if (UsersToShow != null && UsersToShow.Any())
    {
        <h4 class="mt-4">Role: @Manager.HumanizeRole(ActiveRole)</h4>
        <table class="table table-hover table-bordered table-striped">
            <thead>
                <tr class="table-light">
                    <th class="text-center">Username</th>
                    <th class="text-center">Password</th>
                    <th class="text-center">User ID</th>
                    <th class="text-center">Role</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in UsersToShow)
                {
                    @if (Manager.EditingUser?.UserId == user.UserId)
                    {
                        <tr>
                            <td><input class="form-control" @bind="Manager.EditingUser.Username" /></td>
                            <td><input class="form-control" type="password" @bind="Manager.EditingUser.Password" /></td>
                            <td class="text-center">@user.UserId</td>
                            <td>
                                <select class="form-select" @bind="Manager.EditingUser.UserRole">
                                    @foreach (var role in Enum.GetValues(typeof(UserRole)))
                                    {
                                        <option value="@role">@Manager.HumanizeRole((UserRole)role)</option>
                                    }
                                </select>
                            </td>
                            <td class="text-center">
                                <button class="btn btn-sm btn-success me-2" @onclick="SaveUser">
                                    <i class="fas fa-check"></i> Save
                                </button>
                                <button class="btn btn-sm btn-secondary" @onclick="Manager.CancelEdit">
                                    <i class="fas fa-times"></i> Cancel
                                </button>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td>@user.UserName</td>
                            <td>******</td>
                            <td class="text-center">@user.UserId</td>
                            <td>@Manager.HumanizeRole(user.UserRole)</td>
                            <td class="text-center">
                                <button class="btn btn-sm btn-primary me-2" @onclick="() => Manager.ToggleEditUser(user)">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => Manager.DeleteUserAsync(new DeleteUser { UserId = user.UserId })">
                                    <i class="fas fa-trash-alt"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <div class="d-flex justify-content-between align-items-center mt-3 mb-4">
            <button class="btn btn-secondary" @onclick="PreviousPage" disabled="@IsFirstPage()">
                <i class="fas fa-arrow-left"></i> Previous
            </button>
            <span>Page @CurrentPage of @TotalPages</span>
            <button class="btn btn-secondary" @onclick="NextPage" disabled="@IsLastPage()">
                Next <i class="fas fa-arrow-right"></i>
            </button>
        </div>
    }
    else
    {
        <div class="text-center mt-4">
            <p class="text-muted">No users found for the selected role.</p>
        </div>
    }

}

@code {
    private UserRole ActiveRole { get; set; } = UserRole.InventoryManager;
    private List<GetUser> UsersToShow => PaginateUsers();
    private const int PageSize = 14;
    private int CurrentPage { get; set; } = 1;
    private int TotalPages => (int)Math.Ceiling((double)Manager.Users.Count(u => u.UserRole == ActiveRole) / PageSize);

    protected override async Task OnInitializedAsync()
    {
        await LoadInventoryManagers();
    }

    private async Task LoadInventoryManagers()
    {
        ActiveRole = UserRole.InventoryManager;
        CurrentPage = 1;
        await Manager.RefreshUsersAsync(ActiveRole);
        StateHasChanged();
    }

    private async Task LoadWarehouseWorkers()
    {
        ActiveRole = UserRole.WarehouseWorker;
        CurrentPage = 1;
        await Manager.RefreshUsersAsync(ActiveRole);
        StateHasChanged();
    }

    private List<GetUser> PaginateUsers()
    {
        return Manager.Users
            .Where(u => u.UserRole == ActiveRole)
            .Skip((CurrentPage - 1) * PageSize)
            .Take(PageSize)
            .ToList();
    }

    private void NextPage()
    {
        if (CurrentPage < TotalPages) CurrentPage++;
    }

    private void PreviousPage()
    {
        if (CurrentPage > 1) CurrentPage--;
    }

    private bool IsFirstPage() => CurrentPage == 1;
    private bool IsLastPage() => CurrentPage == TotalPages;

    private async void SaveUser()
    {
        await Manager.SaveUserAsync();
        StateHasChanged();
    }

}

@page "/manage-users"
@attribute [Authorize(Roles = "INVENTORY_MANAGER")]
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using BlazorServerApp.Managers
@using Users

@inject UserManager Manager

<PageTitle>Manage Users</PageTitle>

<h1>Manage Users</h1>
<p>Here you can view and manage users by their roles.</p>

@if (Manager.IsLoading)
{
    <div class="text-center my-4">
        <div class="spinner-border" role="status">
            <span class="visually-hidden">Loading...</span>
        </div>
        <p>Loading users, please wait...</p>
    </div>
}
else if (!string.IsNullOrEmpty(Manager.ErrorMessage))
{
    <div class="alert alert-danger">@Manager.ErrorMessage</div>
}
else if (GroupedUsers != null && GroupedUsers.Any())
{
    <div class="input-group mb-4">
        <input class="form-control" type="text" placeholder="Search by username or User ID..." @bind="Manager.SearchQuery" />
        <button class="btn btn-outline-secondary" type="button" @onclick="Manager.ClearSearch">
            <i class="fas fa-times"></i> Clear
        </button>
    </div>

    @foreach (var roleGroup in GroupedUsers)
    {
        <h4 class="mt-4">Role: @Manager.HumanizeRole(roleGroup.Key)</h4>
        <table class="table table-hover table-bordered">
            <thead class="table-dark">
                <tr>
                    <th>Username</th>
                    <th>Password</th>
                    <th>User ID</th>
                    <th>Role</th>
                    <th class="text-center">Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in roleGroup)
                {
                    @if (Manager.EditingUser?.UserId == user.UserId)
                    {
                        <tr>
                            <td><input class="form-control" @bind="Manager.EditingUser.Username" /></td>
                            <td><input class="form-control" type="password" @bind="Manager.EditingUser.Password" /></td>
                            <td>@user.UserId</td>
                            <td>
                                <select class="form-select" @bind="Manager.EditingUser.UserRole">
                                    @foreach (var role in Enum.GetValues(typeof(UserRole)))
                                    {
                                        <option value="@role">@Manager.HumanizeRole((UserRole)role)</option>
                                    }
                                </select>
                            </td>
                            <td class="text-center">
                                <button class="btn btn-sm btn-success me-2" @onclick="SaveUser">
                                    <i class="fas fa-check"></i> Save
                                </button>
                                <button class="btn btn-sm btn-secondary" @onclick="Manager.CancelEdit">
                                    <i class="fas fa-times"></i> Cancel
                                </button>
                            </td>
                        </tr>
                    }
                    else
                    {
                        <tr>
                            <td>@user.Username</td>
                            <td>******</td>
                            <td>@user.UserId</td>
                            <td>@Manager.HumanizeRole(user.UserRole)</td>
                            <td class="text-center">
                                <button class="btn btn-sm btn-warning me-2" @onclick="() => Manager.ToggleEditUser(user)">
                                    <i class="fas fa-edit"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => Manager.DeleteUserAsync(new DeleteUser { UserId = user.UserId })">
                                    <i class="fas fa-trash-alt"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>
    }
}
else
{
    <p>No users found.</p>
}

@code {
    private IEnumerable<IGrouping<UserRole, User>> GroupedUsers;

    protected override async Task OnInitializedAsync()
    {
        GroupedUsers = await Manager.GetGroupedUsersAsync();
    }

    private async void SaveUser()
    {
        await Manager.SaveUserAsync();
        GroupedUsers = await Manager.GetGroupedUsersAsync();
        StateHasChanged();
    }
}

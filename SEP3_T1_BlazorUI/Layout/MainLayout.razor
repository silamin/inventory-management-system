@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using SEP3_T1_BlazorUI.Models
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    /* Main page layout */
    .page {
        position: relative;
        display: flex;
        flex-direction: column;
    }

    main {
        flex: 1;
    }

    .sidebar {
        background-color: #1f2937;
    }

    .top-row {
        background-color: #f7f7f7;
        border-bottom: 1px solid #d6d5d5;
        justify-content: flex-end;
        height: 3.5rem;
        display: flex;
        align-items: center;
    }

        .top-row ::deep a,
        .top-row ::deep .btn-link {
            white-space: nowrap;
            margin-left: 1.5rem;
            text-decoration: none;
        }

            .top-row ::deep a:hover,
            .top-row ::deep .btn-link:hover {
                text-decoration: underline;
            }

            .top-row ::deep a:first-child {
                overflow: hidden;
                text-overflow: ellipsis;
            }

    @@media (max-width: 640.98px) {
        .top-row {
            justify-content: space-between;
        }

            .top-row ::deep a,
            .top-row ::deep .btn-link {
                margin-left: 0;
            }
    }

    @@media (min-width: 641px) {
        .page {
            flex-direction: row;
        }

        .sidebar {
            width: 250px;
            height: 100vh;
            position: sticky;
            top: 0;
        }

        .top-row {
            position: sticky;
            top: 0;
            z-index: 1;
        }

            .top-row.auth ::deep a:first-child {
                flex: 1;
                text-align: right;
                width: 0;
            }

        .top-row,
        article {
            padding-left: 2rem !important;
            padding-right: 1.5rem !important;
        }
    }
</style>

<CascadingAuthenticationState>
    <div class="page">
        @if (IsInventoryManager)
        {
            <div class="sidebar">
                <NavMenu />
            </div>
        }

        <main>
            <article class="content px-4">
                @Body
            </article>
        </main>
    </div>
</CascadingAuthenticationState>
<BlazoredToasts />

@code {
    private bool IsInventoryManager = false;

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to AuthenticationState changes
        AuthenticationStateProvider.AuthenticationStateChanged += OnAuthenticationStateChanged;

        // Initial check for user's role
        await CheckUserRole();
    }

    private async void OnAuthenticationStateChanged(Task<AuthenticationState> task)
    {
        await CheckUserRole();
    }

    private async Task CheckUserRole()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity != null && user.Identity.IsAuthenticated)
        {
            // Check if the user is an Inventory Manager
            IsInventoryManager = user.IsInRole("InventoryManager");
        }
        else
        {
            IsInventoryManager = false; // User is not authenticated, hide sidebar
        }

        // Force Blazor to re-render the component
        StateHasChanged();
    }

    public void Dispose()
    {
        AuthenticationStateProvider.AuthenticationStateChanged -= OnAuthenticationStateChanged;
    }
}
